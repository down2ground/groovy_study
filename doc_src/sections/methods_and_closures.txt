<!--VARIABLES {"title": "Methods and Closures", "SORT_ORDER": "040",
"code": "methods_and_closures"}-->

[TOC]

----------------------------------------------------------------------------------------------------
<!--index ["methods"]-->
# Methods

Also see [<!--ref groovy_site-->, [3.3. Methods](http://groovy-lang.org/structure.html#_methods)].

<div class="blockSrc">project1/methods.groovy</div>

````groovy
<!--include project1/methods.groovy-->
````

----------------------------------------------------------------------------------------------------
<!--index ["closures"]-->
# Closures

Also see [<!--ref groovy_site-->, [Closures](http://groovy-lang.org/closures.html)].

<div class="blockSrc">project1/closures.groovy</div>

````groovy
<!--include project1/closures.groovy-->
````

<!--index ["delegation"]-->
Interesting thing here is the fact that the `Alice` and the `Bob` classes are different and their 
`name` attributes are resolved dynamically at run time.  Also see [<!--ref groovy_site-->,
[3. Delegation strategy](http://groovy-lang.org/closures.html#_delegation_strategy)].

----------------------------------------------------------------------------------------------------
<!--index ["curries"]-->
# Curries

Also see [<!--ref groovy_site-->, [6.1. Currying](https://groovy-lang.org/closures.html#_currying)]
and [<!--ref groovy_wiki-->, [Curry](https://en.wikipedia.org/wiki/Apache_Groovy#Curry)].

> Usually called *partial application*, this Groovy feature allows closures' parameters to be set
> to a default parameter in any of their arguments, creating a new closure with the bound value.
> Supplying one argument to the `curry()` method will fix argument one. Supplying `N` arguments
> will fix arguments `1..N`. 

````groovy
<!--include project1/curries.groovy-->
````


